// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gauss/blindbox/v1/group.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	_ "github.com/golang/protobuf/ptypes/timestamp"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Group struct {
	GroupId        string      `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	BoxSize        uint64      `protobuf:"varint,2,opt,name=box_size,json=boxSize,proto3" json:"box_size,omitempty"`
	BoxPrice       *types.Coin `protobuf:"bytes,3,opt,name=box_price,json=boxPrice,proto3" json:"box_price,omitempty"`
	OpenSize       uint64      `protobuf:"varint,4,opt,name=open_size,json=openSize,proto3" json:"open_size,omitempty"`
	StartTime      time.Time   `protobuf:"bytes,5,opt,name=start_time,json=startTime,proto3,stdtime" json:"start_time"`
	EndTime        time.Time   `protobuf:"bytes,6,opt,name=end_time,json=endTime,proto3,stdtime" json:"end_time"`
	Creator        string      `protobuf:"bytes,7,opt,name=creator,proto3" json:"creator,omitempty"`
	PoolId         string      `protobuf:"bytes,8,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	RandomMin      uint64      `protobuf:"varint,9,opt,name=random_min,json=randomMin,proto3" json:"random_min,omitempty"`
	RandomMax      uint64      `protobuf:"varint,10,opt,name=random_max,json=randomMax,proto3" json:"random_max,omitempty"`
	RandomNfts     []string    `protobuf:"bytes,11,rep,name=random_nfts,json=randomNfts,proto3" json:"random_nfts,omitempty"`
	FixedNfts      []string    `protobuf:"bytes,12,rep,name=fixed_nfts,json=fixedNfts,proto3" json:"fixed_nfts,omitempty"`
	LeftRandomNfts []string    `protobuf:"bytes,13,rep,name=left_random_nfts,json=leftRandomNfts,proto3" json:"left_random_nfts,omitempty"`
	LeftFixedNfts  []string    `protobuf:"bytes,14,rep,name=left_fixed_nfts,json=leftFixedNfts,proto3" json:"left_fixed_nfts,omitempty"`
}

func (m *Group) Reset()         { *m = Group{} }
func (m *Group) String() string { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()    {}
func (*Group) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a0b9f55ef3c27b, []int{0}
}
func (m *Group) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Group) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Group.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Group) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Group.Merge(m, src)
}
func (m *Group) XXX_Size() int {
	return m.Size()
}
func (m *Group) XXX_DiscardUnknown() {
	xxx_messageInfo_Group.DiscardUnknown(m)
}

var xxx_messageInfo_Group proto.InternalMessageInfo

func (m *Group) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Group) GetBoxSize() uint64 {
	if m != nil {
		return m.BoxSize
	}
	return 0
}

func (m *Group) GetBoxPrice() *types.Coin {
	if m != nil {
		return m.BoxPrice
	}
	return nil
}

func (m *Group) GetOpenSize() uint64 {
	if m != nil {
		return m.OpenSize
	}
	return 0
}

func (m *Group) GetStartTime() time.Time {
	if m != nil {
		return m.StartTime
	}
	return time.Time{}
}

func (m *Group) GetEndTime() time.Time {
	if m != nil {
		return m.EndTime
	}
	return time.Time{}
}

func (m *Group) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Group) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *Group) GetRandomMin() uint64 {
	if m != nil {
		return m.RandomMin
	}
	return 0
}

func (m *Group) GetRandomMax() uint64 {
	if m != nil {
		return m.RandomMax
	}
	return 0
}

func (m *Group) GetRandomNfts() []string {
	if m != nil {
		return m.RandomNfts
	}
	return nil
}

func (m *Group) GetFixedNfts() []string {
	if m != nil {
		return m.FixedNfts
	}
	return nil
}

func (m *Group) GetLeftRandomNfts() []string {
	if m != nil {
		return m.LeftRandomNfts
	}
	return nil
}

func (m *Group) GetLeftFixedNfts() []string {
	if m != nil {
		return m.LeftFixedNfts
	}
	return nil
}

type PoolIdToGroupId struct {
	GroupId string `protobuf:"bytes,1,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
}

func (m *PoolIdToGroupId) Reset()         { *m = PoolIdToGroupId{} }
func (m *PoolIdToGroupId) String() string { return proto.CompactTextString(m) }
func (*PoolIdToGroupId) ProtoMessage()    {}
func (*PoolIdToGroupId) Descriptor() ([]byte, []int) {
	return fileDescriptor_77a0b9f55ef3c27b, []int{1}
}
func (m *PoolIdToGroupId) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolIdToGroupId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolIdToGroupId.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolIdToGroupId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolIdToGroupId.Merge(m, src)
}
func (m *PoolIdToGroupId) XXX_Size() int {
	return m.Size()
}
func (m *PoolIdToGroupId) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolIdToGroupId.DiscardUnknown(m)
}

var xxx_messageInfo_PoolIdToGroupId proto.InternalMessageInfo

func (m *PoolIdToGroupId) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func init() {
	proto.RegisterType((*Group)(nil), "gauss.blindbox.v1.Group")
	proto.RegisterType((*PoolIdToGroupId)(nil), "gauss.blindbox.v1.PoolIdToGroupId")
}

func init() { proto.RegisterFile("gauss/blindbox/v1/group.proto", fileDescriptor_77a0b9f55ef3c27b) }

var fileDescriptor_77a0b9f55ef3c27b = []byte{
	// 489 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x80, 0x63, 0x9a, 0xc6, 0xf1, 0x86, 0xb6, 0x60, 0x21, 0xe1, 0x06, 0xd5, 0x89, 0x7a, 0x40,
	0x11, 0x42, 0xbb, 0x0a, 0x48, 0xbd, 0x22, 0xb5, 0x88, 0xaa, 0x07, 0x50, 0x65, 0x7a, 0xe2, 0x12,
	0xf9, 0x67, 0x6d, 0x56, 0x8a, 0x77, 0x2c, 0xef, 0x26, 0x32, 0x7d, 0x8a, 0xde, 0x79, 0xa1, 0x1e,
	0x7b, 0xe4, 0x04, 0x28, 0x79, 0x11, 0xb4, 0xb3, 0x8e, 0x12, 0x0e, 0x1c, 0xb8, 0x44, 0x99, 0xf9,
	0x66, 0xbf, 0xf1, 0xac, 0xc7, 0xe4, 0xa4, 0x88, 0x17, 0x4a, 0xb1, 0x64, 0x2e, 0x64, 0x96, 0x40,
	0xc3, 0x96, 0x53, 0x56, 0xd4, 0xb0, 0xa8, 0x68, 0x55, 0x83, 0x06, 0xff, 0x29, 0x62, 0xba, 0xc1,
	0x74, 0x39, 0x1d, 0x3e, 0x2b, 0xa0, 0x00, 0xa4, 0xcc, 0xfc, 0xb3, 0x85, 0xc3, 0x51, 0x01, 0x50,
	0xcc, 0x39, 0xc3, 0x28, 0x59, 0xe4, 0x4c, 0x8b, 0x92, 0x2b, 0x1d, 0x97, 0xad, 0x69, 0x18, 0xa6,
	0xa0, 0x4a, 0x50, 0x2c, 0x89, 0x15, 0x67, 0xcb, 0x69, 0xc2, 0x75, 0x3c, 0x65, 0x29, 0x08, 0x69,
	0xf9, 0xe9, 0xf7, 0x2e, 0xd9, 0xbf, 0x34, 0x9d, 0xfd, 0x63, 0xd2, 0xc7, 0x47, 0x98, 0x89, 0x2c,
	0x70, 0xc6, 0xce, 0xc4, 0x8b, 0x5c, 0x8c, 0xaf, 0x32, 0x83, 0x12, 0x68, 0x66, 0x4a, 0xdc, 0xf2,
	0xe0, 0xd1, 0xd8, 0x99, 0x74, 0x23, 0x37, 0x81, 0xe6, 0xb3, 0xb8, 0xe5, 0xfe, 0x19, 0xf1, 0x0c,
	0xaa, 0x6a, 0x91, 0xf2, 0x60, 0x6f, 0xec, 0x4c, 0x06, 0x6f, 0x8e, 0xa9, 0xed, 0x49, 0x4d, 0x4f,
	0xda, 0xf6, 0xa4, 0x17, 0x20, 0x64, 0x64, 0x34, 0xd7, 0xa6, 0xd4, 0x7f, 0x41, 0x3c, 0xa8, 0xb8,
	0xb4, 0xce, 0x2e, 0x3a, 0xfb, 0x26, 0x81, 0xd2, 0x0b, 0x42, 0x94, 0x8e, 0x6b, 0x3d, 0x33, 0xd3,
	0x04, 0xfb, 0x68, 0x1d, 0x52, 0x3b, 0x2a, 0xdd, 0x8c, 0x4a, 0x6f, 0x36, 0xa3, 0x9e, 0xf7, 0xef,
	0x7f, 0x8e, 0x3a, 0x77, 0xbf, 0x46, 0x4e, 0xe4, 0xe1, 0x39, 0x43, 0xfc, 0x77, 0xa4, 0xcf, 0x65,
	0x66, 0x15, 0xbd, 0xff, 0x50, 0xb8, 0x5c, 0x66, 0x28, 0x08, 0x88, 0x9b, 0xd6, 0x3c, 0xd6, 0x50,
	0x07, 0xae, 0xbd, 0x8f, 0x36, 0xf4, 0x9f, 0x13, 0xb7, 0x02, 0x98, 0x9b, 0x9b, 0xea, 0x23, 0xe9,
	0x99, 0xf0, 0x2a, 0xf3, 0x4f, 0x08, 0xa9, 0x63, 0x99, 0x41, 0x39, 0x2b, 0x85, 0x0c, 0x3c, 0x1c,
	0xcb, 0xb3, 0x99, 0x8f, 0x42, 0xee, 0xe2, 0xb8, 0x09, 0xc8, 0x5f, 0x38, 0x6e, 0xfc, 0x11, 0x19,
	0xb4, 0x58, 0xe6, 0x5a, 0x05, 0x83, 0xf1, 0xde, 0xc4, 0x8b, 0xda, 0x13, 0x9f, 0x72, 0xad, 0xcc,
	0xf9, 0x5c, 0x34, 0x3c, 0xb3, 0xfc, 0x31, 0x72, 0x0f, 0x33, 0x88, 0x27, 0xe4, 0xc9, 0x9c, 0xe7,
	0x7a, 0xb6, 0x2b, 0x39, 0xc0, 0xa2, 0x43, 0x93, 0x8f, 0xb6, 0xa2, 0x97, 0xe4, 0x08, 0x2b, 0x77,
	0x6c, 0x87, 0x58, 0x78, 0x60, 0xd2, 0x1f, 0x36, 0xc6, 0xd3, 0xd7, 0xe4, 0xe8, 0x1a, 0x27, 0xbb,
	0x81, 0xcb, 0xed, 0x2e, 0xfc, 0x63, 0x4d, 0xce, 0xdf, 0xdf, 0xaf, 0x42, 0xe7, 0x61, 0x15, 0x3a,
	0xbf, 0x57, 0xa1, 0x73, 0xb7, 0x0e, 0x3b, 0x0f, 0xeb, 0xb0, 0xf3, 0x63, 0x1d, 0x76, 0xbe, 0xbc,
	0x2a, 0x84, 0xfe, 0xba, 0x48, 0x68, 0x0a, 0x25, 0xb3, 0x9b, 0x6f, 0x7f, 0x97, 0x67, 0xac, 0xd9,
	0x7e, 0x04, 0xfa, 0x5b, 0xc5, 0x55, 0xd2, 0xc3, 0xb7, 0xf3, 0xf6, 0x4f, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xab, 0xf4, 0x9f, 0xb7, 0x23, 0x03, 0x00, 0x00,
}

func (m *Group) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Group) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Group) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LeftFixedNfts) > 0 {
		for iNdEx := len(m.LeftFixedNfts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LeftFixedNfts[iNdEx])
			copy(dAtA[i:], m.LeftFixedNfts[iNdEx])
			i = encodeVarintGroup(dAtA, i, uint64(len(m.LeftFixedNfts[iNdEx])))
			i--
			dAtA[i] = 0x72
		}
	}
	if len(m.LeftRandomNfts) > 0 {
		for iNdEx := len(m.LeftRandomNfts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LeftRandomNfts[iNdEx])
			copy(dAtA[i:], m.LeftRandomNfts[iNdEx])
			i = encodeVarintGroup(dAtA, i, uint64(len(m.LeftRandomNfts[iNdEx])))
			i--
			dAtA[i] = 0x6a
		}
	}
	if len(m.FixedNfts) > 0 {
		for iNdEx := len(m.FixedNfts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.FixedNfts[iNdEx])
			copy(dAtA[i:], m.FixedNfts[iNdEx])
			i = encodeVarintGroup(dAtA, i, uint64(len(m.FixedNfts[iNdEx])))
			i--
			dAtA[i] = 0x62
		}
	}
	if len(m.RandomNfts) > 0 {
		for iNdEx := len(m.RandomNfts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RandomNfts[iNdEx])
			copy(dAtA[i:], m.RandomNfts[iNdEx])
			i = encodeVarintGroup(dAtA, i, uint64(len(m.RandomNfts[iNdEx])))
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.RandomMax != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.RandomMax))
		i--
		dAtA[i] = 0x50
	}
	if m.RandomMin != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.RandomMin))
		i--
		dAtA[i] = 0x48
	}
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0x3a
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.EndTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGroup(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	n2, err2 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.StartTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintGroup(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x2a
	if m.OpenSize != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.OpenSize))
		i--
		dAtA[i] = 0x20
	}
	if m.BoxPrice != nil {
		{
			size, err := m.BoxPrice.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGroup(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.BoxSize != 0 {
		i = encodeVarintGroup(dAtA, i, uint64(m.BoxSize))
		i--
		dAtA[i] = 0x10
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolIdToGroupId) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolIdToGroupId) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolIdToGroupId) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintGroup(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGroup(dAtA []byte, offset int, v uint64) int {
	offset -= sovGroup(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Group) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.BoxSize != 0 {
		n += 1 + sovGroup(uint64(m.BoxSize))
	}
	if m.BoxPrice != nil {
		l = m.BoxPrice.Size()
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.OpenSize != 0 {
		n += 1 + sovGroup(uint64(m.OpenSize))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.StartTime)
	n += 1 + l + sovGroup(uint64(l))
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.EndTime)
	n += 1 + l + sovGroup(uint64(l))
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	if m.RandomMin != 0 {
		n += 1 + sovGroup(uint64(m.RandomMin))
	}
	if m.RandomMax != 0 {
		n += 1 + sovGroup(uint64(m.RandomMax))
	}
	if len(m.RandomNfts) > 0 {
		for _, s := range m.RandomNfts {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if len(m.FixedNfts) > 0 {
		for _, s := range m.FixedNfts {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if len(m.LeftRandomNfts) > 0 {
		for _, s := range m.LeftRandomNfts {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	if len(m.LeftFixedNfts) > 0 {
		for _, s := range m.LeftFixedNfts {
			l = len(s)
			n += 1 + l + sovGroup(uint64(l))
		}
	}
	return n
}

func (m *PoolIdToGroupId) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovGroup(uint64(l))
	}
	return n
}

func sovGroup(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGroup(x uint64) (n int) {
	return sovGroup(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Group) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Group: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Group: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxSize", wireType)
			}
			m.BoxSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoxSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BoxPrice == nil {
				m.BoxPrice = &types.Coin{}
			}
			if err := m.BoxPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OpenSize", wireType)
			}
			m.OpenSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OpenSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.StartTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.EndTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomMin", wireType)
			}
			m.RandomMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomMin |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomMax", wireType)
			}
			m.RandomMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RandomMax |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomNfts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RandomNfts = append(m.RandomNfts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FixedNfts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FixedNfts = append(m.FixedNfts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftRandomNfts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftRandomNfts = append(m.LeftRandomNfts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LeftFixedNfts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LeftFixedNfts = append(m.LeftFixedNfts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolIdToGroupId) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolIdToGroupId: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolIdToGroupId: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGroup
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGroup
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGroup(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGroup
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGroup(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGroup
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGroup
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGroup
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGroup
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGroup
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGroup        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGroup          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGroup = fmt.Errorf("proto: unexpected end of group")
)
