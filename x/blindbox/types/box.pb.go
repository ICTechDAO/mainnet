// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gauss/blindbox/v1/box.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Box struct {
	BoxId   string   `protobuf:"bytes,1,opt,name=box_id,json=boxId,proto3" json:"box_id,omitempty"`
	Opened  bool     `protobuf:"varint,2,opt,name=opened,proto3" json:"opened,omitempty"`
	GroupId string   `protobuf:"bytes,3,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	Nfts    []string `protobuf:"bytes,4,rep,name=nfts,proto3" json:"nfts,omitempty"`
}

func (m *Box) Reset()         { *m = Box{} }
func (m *Box) String() string { return proto.CompactTextString(m) }
func (*Box) ProtoMessage()    {}
func (*Box) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cd494f98cab57d2, []int{0}
}
func (m *Box) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Box) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Box.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Box) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Box.Merge(m, src)
}
func (m *Box) XXX_Size() int {
	return m.Size()
}
func (m *Box) XXX_DiscardUnknown() {
	xxx_messageInfo_Box.DiscardUnknown(m)
}

var xxx_messageInfo_Box proto.InternalMessageInfo

func (m *Box) GetBoxId() string {
	if m != nil {
		return m.BoxId
	}
	return ""
}

func (m *Box) GetOpened() bool {
	if m != nil {
		return m.Opened
	}
	return false
}

func (m *Box) GetGroupId() string {
	if m != nil {
		return m.GroupId
	}
	return ""
}

func (m *Box) GetNfts() []string {
	if m != nil {
		return m.Nfts
	}
	return nil
}

func init() {
	proto.RegisterType((*Box)(nil), "gauss.blindbox.v1.Box")
}

func init() { proto.RegisterFile("gauss/blindbox/v1/box.proto", fileDescriptor_1cd494f98cab57d2) }

var fileDescriptor_1cd494f98cab57d2 = []byte{
	// 208 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x4e, 0x4f, 0x2c, 0x2d,
	0x2e, 0xd6, 0x4f, 0xca, 0xc9, 0xcc, 0x4b, 0x49, 0xca, 0xaf, 0xd0, 0x2f, 0x33, 0xd4, 0x4f, 0xca,
	0xaf, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x12, 0x04, 0x4b, 0xea, 0xc1, 0x24, 0xf5, 0xca,
	0x0c, 0x95, 0x92, 0xb9, 0x98, 0x9d, 0xf2, 0x2b, 0x84, 0x44, 0xb9, 0xd8, 0x92, 0xf2, 0x2b, 0xe2,
	0x33, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x58, 0x93, 0xf2, 0x2b, 0x3c, 0x53, 0x84,
	0xc4, 0xb8, 0xd8, 0xf2, 0x0b, 0x52, 0xf3, 0x52, 0x53, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x82,
	0xa0, 0x3c, 0x21, 0x49, 0x2e, 0x8e, 0xf4, 0xa2, 0xfc, 0xd2, 0x02, 0x90, 0x06, 0x66, 0xb0, 0x06,
	0x76, 0x30, 0xdf, 0x33, 0x45, 0x48, 0x88, 0x8b, 0x25, 0x2f, 0xad, 0xa4, 0x58, 0x82, 0x45, 0x81,
	0x59, 0x83, 0x33, 0x08, 0xcc, 0x76, 0x72, 0x39, 0xf1, 0x48, 0x8e, 0xf1, 0xc2, 0x23, 0x39, 0xc6,
	0x07, 0x8f, 0xe4, 0x18, 0x27, 0x3c, 0x96, 0x63, 0xb8, 0xf0, 0x58, 0x8e, 0xe1, 0xc6, 0x63, 0x39,
	0x86, 0x28, 0xad, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc, 0x5c, 0x7d, 0x88, 0xcb,
	0x21, 0x64, 0x99, 0x99, 0x7e, 0x05, 0xc2, 0x13, 0x25, 0x95, 0x05, 0xa9, 0xc5, 0x49, 0x6c, 0x60,
	0x4f, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xfd, 0xef, 0x12, 0x05, 0xe3, 0x00, 0x00, 0x00,
}

func (m *Box) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Box) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Box) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Nfts) > 0 {
		for iNdEx := len(m.Nfts) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Nfts[iNdEx])
			copy(dAtA[i:], m.Nfts[iNdEx])
			i = encodeVarintBox(dAtA, i, uint64(len(m.Nfts[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.GroupId) > 0 {
		i -= len(m.GroupId)
		copy(dAtA[i:], m.GroupId)
		i = encodeVarintBox(dAtA, i, uint64(len(m.GroupId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Opened {
		i--
		if m.Opened {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.BoxId) > 0 {
		i -= len(m.BoxId)
		copy(dAtA[i:], m.BoxId)
		i = encodeVarintBox(dAtA, i, uint64(len(m.BoxId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBox(dAtA []byte, offset int, v uint64) int {
	offset -= sovBox(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Box) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BoxId)
	if l > 0 {
		n += 1 + l + sovBox(uint64(l))
	}
	if m.Opened {
		n += 2
	}
	l = len(m.GroupId)
	if l > 0 {
		n += 1 + l + sovBox(uint64(l))
	}
	if len(m.Nfts) > 0 {
		for _, s := range m.Nfts {
			l = len(s)
			n += 1 + l + sovBox(uint64(l))
		}
	}
	return n
}

func sovBox(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBox(x uint64) (n int) {
	return sovBox(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Box) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBox
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Box: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Box: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoxId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBox
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBox
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BoxId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Opened", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Opened = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBox
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBox
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nfts", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBox
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBox
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBox
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nfts = append(m.Nfts, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBox(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBox
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBox(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBox
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBox
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBox
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBox
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBox
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBox
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBox        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBox          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBox = fmt.Errorf("proto: unexpected end of group")
)
