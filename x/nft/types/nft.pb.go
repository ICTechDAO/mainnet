// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: gauss/nft/v1/nft.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params defines the parameters for the liquidity module.
type Params struct {
	// Fee paid to create a Liquidity Pool. Set a fee to prevent spamming.
	NftCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=nft_creation_fee,json=nftCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"nft_creation_fee" yaml:"nft_creation_fee"`
	// fee allot
	BurnPercent       github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=burn_percent,json=burnPercent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"burn_percent" yaml:"burn_percent"`
	CommunityPercent  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=community_percent,json=communityPercent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"community_percent" yaml:"community_percent"`
	ValidatorsPercent github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=validators_percent,json=validatorsPercent,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"validators_percent" yaml:"validators_percent"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_738a48ddabe5abb4, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

// 最后成交价格
//message LastPrice {
//    string token_id = 1;
//    repeated cosmos.base.v1beta1.Coin coins = 2;
//}
type LastPrice struct {
	TokenId string      `protobuf:"bytes,1,opt,name=token_id,json=tokenId,proto3" json:"token_id,omitempty"`
	Coin    *types.Coin `protobuf:"bytes,2,opt,name=coin,proto3" json:"coin,omitempty"`
}

func (m *LastPrice) Reset()         { *m = LastPrice{} }
func (m *LastPrice) String() string { return proto.CompactTextString(m) }
func (*LastPrice) ProtoMessage()    {}
func (*LastPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_738a48ddabe5abb4, []int{1}
}
func (m *LastPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastPrice.Merge(m, src)
}
func (m *LastPrice) XXX_Size() int {
	return m.Size()
}
func (m *LastPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_LastPrice.DiscardUnknown(m)
}

var xxx_messageInfo_LastPrice proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "gauss.nft.v1.Params")
	proto.RegisterType((*LastPrice)(nil), "gauss.nft.v1.LastPrice")
}

func init() { proto.RegisterFile("gauss/nft/v1/nft.proto", fileDescriptor_738a48ddabe5abb4) }

var fileDescriptor_738a48ddabe5abb4 = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xb1, 0x6e, 0xd4, 0x30,
	0x18, 0xc7, 0x63, 0x7a, 0x2a, 0xad, 0x5b, 0xa1, 0x36, 0x20, 0xb8, 0xeb, 0xe0, 0x54, 0x91, 0x40,
	0xb7, 0x34, 0xd6, 0x81, 0xc4, 0xd0, 0xf1, 0x0e, 0x90, 0xa0, 0x0c, 0xa7, 0x48, 0x2c, 0x2c, 0x27,
	0xc7, 0x71, 0x52, 0xab, 0x8d, 0x7d, 0x8a, 0x9d, 0xc0, 0x31, 0xf3, 0x00, 0x1d, 0x19, 0x3b, 0xf3,
	0x24, 0x37, 0x76, 0x44, 0x0c, 0x01, 0xee, 0x16, 0xe6, 0x3e, 0x01, 0xb2, 0x1d, 0x8e, 0x8a, 0x4a,
	0x88, 0x2e, 0xb1, 0xbf, 0x4f, 0xce, 0xef, 0xf7, 0x59, 0xfe, 0xc3, 0xfb, 0x39, 0xa9, 0x94, 0xc2,
	0x22, 0xd3, 0xb8, 0x1e, 0x98, 0x25, 0x9a, 0x96, 0x52, 0x4b, 0x7f, 0xdb, 0xf6, 0x23, 0xd3, 0xa8,
	0x07, 0x7b, 0x88, 0x4a, 0x55, 0x48, 0x85, 0x13, 0xa2, 0x18, 0xae, 0x07, 0x09, 0xd3, 0x64, 0x80,
	0xa9, 0xe4, 0xc2, 0x9d, 0xde, 0xbb, 0x97, 0xcb, 0x5c, 0xda, 0x2d, 0x36, 0x3b, 0xd7, 0x0d, 0x3f,
	0x76, 0xe0, 0xfa, 0x98, 0x94, 0xa4, 0x50, 0xfe, 0x19, 0x80, 0x3b, 0x22, 0xd3, 0x13, 0x5a, 0x32,
	0xa2, 0xb9, 0x14, 0x93, 0x8c, 0xb1, 0x2e, 0xd8, 0x5f, 0xeb, 0x6f, 0x3d, 0xee, 0x45, 0x0e, 0x1e,
	0x19, 0x78, 0xd4, 0xc2, 0xa3, 0x91, 0xe4, 0x62, 0x78, 0x34, 0x6f, 0x02, 0xef, 0xb2, 0x09, 0x1e,
	0xcc, 0x48, 0x71, 0x7a, 0x18, 0xfe, 0x0d, 0x08, 0x3f, 0x7f, 0x0b, 0xfa, 0x39, 0xd7, 0xc7, 0x55,
	0x12, 0x51, 0x59, 0xe0, 0x76, 0x48, 0xb7, 0x1c, 0xa8, 0xf4, 0x04, 0xeb, 0xd9, 0x94, 0x29, 0xcb,
	0x52, 0xf1, 0x1d, 0x91, 0xe9, 0x51, 0xfb, 0xf7, 0x0b, 0xc6, 0xfc, 0x63, 0xb8, 0x9d, 0x54, 0xa5,
	0x98, 0x4c, 0x59, 0x49, 0x99, 0xd0, 0xdd, 0x5b, 0xfb, 0xa0, 0xbf, 0x39, 0x7c, 0x6e, 0x94, 0x5f,
	0x9b, 0xe0, 0xd1, 0x7f, 0x70, 0x9f, 0x31, 0x7a, 0xd9, 0x04, 0x77, 0xdd, 0x70, 0x57, 0x59, 0x61,
	0xbc, 0x65, 0xca, 0xb1, 0xab, 0xfc, 0x77, 0x70, 0x97, 0xca, 0xa2, 0xa8, 0x04, 0xd7, 0xb3, 0x95,
	0x6e, 0xcd, 0xea, 0x5e, 0xdd, 0x58, 0xd7, 0x75, 0xba, 0x6b, 0xc0, 0x30, 0xde, 0x59, 0xf5, 0x7e,
	0x8b, 0x3f, 0x40, 0xbf, 0x26, 0xa7, 0x3c, 0x25, 0x5a, 0x96, 0x6a, 0x65, 0xee, 0x58, 0xf3, 0xd1,
	0x8d, 0xcd, 0x3d, 0x67, 0xbe, 0x4e, 0x0c, 0xe3, 0xdd, 0x3f, 0xcd, 0xd6, 0x7d, 0xb8, 0xf1, 0xe9,
	0x3c, 0xf0, 0x7e, 0x9e, 0x07, 0x20, 0x7c, 0x03, 0x37, 0x5f, 0x13, 0xa5, 0xc7, 0x25, 0xa7, 0xcc,
	0xef, 0xc1, 0x0d, 0x2d, 0x4f, 0x98, 0x98, 0xf0, 0xb4, 0x0b, 0xcc, 0x20, 0xf1, 0x6d, 0x5b, 0xbf,
	0x4c, 0xfd, 0x03, 0xd8, 0x31, 0x91, 0xb2, 0x0f, 0xf1, 0xaf, 0x58, 0xc4, 0xf6, 0xd8, 0x70, 0x34,
	0xff, 0x81, 0xbc, 0xf9, 0x02, 0x81, 0x8b, 0x05, 0x02, 0xdf, 0x17, 0x08, 0x9c, 0x2d, 0x91, 0x77,
	0xb1, 0x44, 0xde, 0x97, 0x25, 0xf2, 0xde, 0x3e, 0xbc, 0x72, 0x2d, 0x17, 0x71, 0xf7, 0xad, 0x9f,
	0xe2, 0xf7, 0x36, 0xed, 0xf6, 0x66, 0xc9, 0xba, 0x4d, 0xea, 0x93, 0x5f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x58, 0x49, 0x3d, 0x82, 0x07, 0x03, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.NftCreationFee) != len(that1.NftCreationFee) {
		return false
	}
	for i := range this.NftCreationFee {
		if !this.NftCreationFee[i].Equal(&that1.NftCreationFee[i]) {
			return false
		}
	}
	if !this.BurnPercent.Equal(that1.BurnPercent) {
		return false
	}
	if !this.CommunityPercent.Equal(that1.CommunityPercent) {
		return false
	}
	if !this.ValidatorsPercent.Equal(that1.ValidatorsPercent) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ValidatorsPercent.Size()
		i -= size
		if _, err := m.ValidatorsPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size := m.CommunityPercent.Size()
		i -= size
		if _, err := m.CommunityPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.BurnPercent.Size()
		i -= size
		if _, err := m.BurnPercent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintNft(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.NftCreationFee) > 0 {
		for iNdEx := len(m.NftCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.NftCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintNft(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LastPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Coin != nil {
		{
			size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintNft(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.TokenId) > 0 {
		i -= len(m.TokenId)
		copy(dAtA[i:], m.TokenId)
		i = encodeVarintNft(dAtA, i, uint64(len(m.TokenId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintNft(dAtA []byte, offset int, v uint64) int {
	offset -= sovNft(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.NftCreationFee) > 0 {
		for _, e := range m.NftCreationFee {
			l = e.Size()
			n += 1 + l + sovNft(uint64(l))
		}
	}
	l = m.BurnPercent.Size()
	n += 1 + l + sovNft(uint64(l))
	l = m.CommunityPercent.Size()
	n += 1 + l + sovNft(uint64(l))
	l = m.ValidatorsPercent.Size()
	n += 1 + l + sovNft(uint64(l))
	return n
}

func (m *LastPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TokenId)
	if l > 0 {
		n += 1 + l + sovNft(uint64(l))
	}
	if m.Coin != nil {
		l = m.Coin.Size()
		n += 1 + l + sovNft(uint64(l))
	}
	return n
}

func sovNft(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozNft(x uint64) (n int) {
	return sovNft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NftCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NftCreationFee = append(m.NftCreationFee, types.Coin{})
			if err := m.NftCreationFee[len(m.NftCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BurnPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BurnPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommunityPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorsPercent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorsPercent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LastPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowNft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowNft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthNft
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthNft
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Coin == nil {
				m.Coin = &types.Coin{}
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipNft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthNft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipNft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowNft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowNft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthNft
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupNft
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthNft
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthNft        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowNft          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupNft = fmt.Errorf("proto: unexpected end of group")
)
