syntax = "proto3";
package gauss.farm.v1;

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "gauss/farm/v1/farm.proto";

option go_package = "github.com/gauss/gauss/v6/x/farm/types";

service Query {
  rpc FarmPools(QueryFarmPoolsRequest) returns (QueryFarmPoolsResponse) {
    option (google.api.http).get = "/icplaza/farm/pools";
  }

  rpc FarmPool(QueryFarmPoolRequest) returns (QueryFarmPoolResponse) {
    option (google.api.http).get = "/icplaza/farm/pool/{name}";
  }

  rpc Farmer(QueryFarmerRequest) returns (QueryFarmerResponse) {
    option (google.api.http).get = "/icplaza/farm/farmer/{farmer}";
  }

  // Params queries the htlc parameters
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/icplaza/farm/params";
  }
}

message FarmPoolEntry {
  FarmPool pool = 1 [(gogoproto.nullable) = false];

  repeated cosmos.base.v1beta1.Coin remaining_rewards = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message QueryFarmPoolsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QueryFarmPoolsResponse {
  repeated FarmPoolEntry pools = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryFarmPoolRequest {string name = 1;}
message QueryFarmPoolResponse {FarmPoolEntry pool = 1;}

message QueryFarmerRequest {
  string farmer = 1;
  string pool_name = 2;
}

message QueryFarmerResponse {
  repeated LockedList list = 1;
  int64 height = 2;
}

message LockedList {
  Farmer farmer = 1;
  repeated cosmos.base.v1beta1.Coin pending_rewards = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.nullable) = false
  ];
}

message QueryParamsRequest {}

message QueryParamsResponse {
  Params params = 1 [(gogoproto.nullable) = false];
}
